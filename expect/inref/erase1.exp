#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Jul  4 14:30:37 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set timeout -1
spawn $env(SHELL)
match_max 100000
expect "*"
send -- "set prompt=\"GTM7675>\"\r"
expect "*"
expect -- "GTM7675>"
send -- "uname\r"

expect {
        # HPUX is the stupids
        "HP-UX" {
                send -- "setenv TERM vt320\r"
                expect -- "GTM7675>"
                send -- "stty erase '^?'\r"
                expect -- "GTM7675>"
		send -- "stty intr '^c'\r"
        }
        # stty shows AIX mapping ^H to erase, fix it
        "AIX" {
                send -- "stty erase '^?'\r"
        }
        "SunOS" {
                send -- "setenv TERM vt320\r"
                expect -- "GTM7675>"
                send -- "setenv TERMINFO /usr/local/lib/terminfo\r"
                expect -- "GTM7675>"
                send -- "alias stty /usr/ucb/stty\r"
        }
        "Linux" {send -- "\r"}
}

set timeout 5
# Test starts here: EMPTERM or UNDEF gtm_principal_editing
expect -- "GTM7675>"
send -- "\$gtm_exe/mumps -run drive^erase\r"
expect -exact "\$gtm_exe/mumps -run drive^erase\r\r
-----------------ITERATION 0-------------------\r
\r
TEST 0: erase character on terminal(Look for erase character in stty -a output)\r
Press erase key\r
"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 1: kbs TERMIINFO capability.\r
Press BACKSPACE key\r
"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 2: kdch1 TERMIINFO capability.\r
Press DELETE key\r
"
send -- "GTMM\033\[3~"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
-----------------ITERATION 1-------------------\r
\r
TEST 0: erase character on terminal(Look for erase character in stty -a output)\r
Press erase key\r
\[3~"
send -- "\177\177\177"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 1: kbs TERMIINFO capability.\r
Press BACKSPACE key\r
"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 2: kdch1 TERMIINFO capability.\r
Press DELETE key\r
"
send -- "GTMM\033\[3~"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
-----------------ITERATION 2-------------------\r
\r
TEST 0: erase character on terminal(Look for erase character in stty -a output)\r
Press erase key\r
"
send -- "\177"
expect -exact "SUCCESS: \$key, \$zb, localvar have expected values\r"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 1: kbs TERMIINFO capability.\r
Press BACKSPACE key\r
"
send -- "\177"
expect -exact "SUCCESS: \$key, \$zb, localvar have expected values\r"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 2: kdch1 TERMIINFO capability.\r
Press DELETE key\r
"
send -- "\033\[3~"
expect -exact "SUCCESS: \$key, \$zb, localvar have expected values\r"
send -- "\177\177\177"
send -- "GTMM\033\[3~"
expect -exact "\r
SUCCESS: Normal erase while reading.\r"
send -- "\177\177\177"
expect -exact "-----------------ITERATION 3-------------------\r
\r
TEST 0: erase character on terminal(Look for erase character in stty -a output)\r
Press erase key\r
"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 1: kbs TERMIINFO capability.\r
Press BACKSPACE key\r
"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 2: kdch1 TERMIINFO capability.\r
Press DELETE key\r
"
send -- "GTMM\033\[3~"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
-----------------ITERATION 4-------------------\r
\r
TEST 0: erase character on terminal(Look for erase character in stty -a output)\r
Press erase key\r
\[3~"
send -- "\177\177\177\177"
expect -exact "SUCCESS: \$key, \$zb, localvar have expected values\r"
send -- "GTMM\177\r"
expect -exact "GTM"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 1: kbs TERMIINFO capability.\r
Press BACKSPACE key\r
"
send -- "\177"
expect -exact "SUCCESS: \$key, \$zb, localvar have expected values\r"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r
TEST 2: kdch1 TERMIINFO capability.\r
Press DELETE key\r
"
send -- "\033\[3~"
expect -exact "SUCCESS: \$key, \$zb, localvar have expected values\r"
send -- "GTMM\177"
expect -exact "\010 \010"
send -- "\r"
expect -exact "\r
SUCCESS: Normal erase while reading.\r"
send -- "exit\r"
expect eof
