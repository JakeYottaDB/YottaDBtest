#!/usr/local/bin/tcsh -f
#################################################################
#								#
# Copyright (c) 2009-2016 Fidelity National Information		#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
#
# Test that encryption plugin's reference implementation issues CRYPTKEYFETCHFAILED whenever it notices that the hash in the
# database file header does NOT match with that of the corresponding key file.
# Also test that DSE CHANGE -FILE -ENCRYPTION_HASH fixes this situation

# Set white box test case to avoid asserts during encryption initialization.
echo "# Enable WHITE BOX TESTING"
setenv gtm_white_box_test_case_enable 1
setenv gtm_white_box_test_case_number 22

$gtm_tst/com/dbcreate.csh mumps 1

$GTM << EOF
s ^ENCRYPT="KEY"
h
EOF

$echoline
echo "Do computations to arrive at the new corrupted hash to exercise CRYPTKEYFETCHFAILED"
$echoline
# Find out the encryption hash from DSE DUMP -FILE -ALL
set hash = `$DSE dump -file -all |& $tst_awk '/Database file encryption hash/{print $NF;exit}'`
echo
echo
$echoline
echo "Encryption hash = GTM_TEST_DEBUGINFO $hash"
$echoline
# The encryption hash is a 64 byte character array located at an offset of 0x700 from the beginning of the
# databse file header
set encryption_hash_offset = `$gtm_tst/com/radixconvert.csh h2d 700 | $tst_awk '{print $5}'`	# In decimal
echo
echo
$echoline
echo "Encryption hash offset = GTM_TEST_DEBUGINFO $encryption_hash_offset"
$echoline
# The size of the hash is 128 characters (actually 64 bytes generated by SHA-512 hash algorithm)
# Choose a random character to be corrupted within a range of 0 - 63 (inclusive)
set random_offset = `$gtm_exe/mumps -run rand 64`
echo
echo
$echoline
echo "Randomly chosen encryption hash offset to be corrupted = GTM_TEST_DEBUGINFO $random_offset"
$echoline
# Find out the final location in the database file header to be corrupted in hex
@ location = $encryption_hash_offset + $random_offset
set location_in_hex = `$gtm_tst/com/radixconvert.csh d2h $location | $tst_awk '{print $2}'`
echo
echo
$echoline
echo "Location to be corrupted: GTM_TEST_DEBUGINFO (Hex) : 0x$location_in_hex ; (Dec) : $location"
$echoline
# Find the hexadecimal value at that offset
@ char_start = ($random_offset * 2) + 1
@ char_end = ($char_start + 1)
set value_at_location = `echo $hash | cut -c $char_start-$char_end`
echo
echo
$echoline
echo "Current value at location GTM_TEST_DEBUGINFO $location_in_hex is 0x$value_at_location"
$echoline
# We shall use 0x20 as the new value which we want to replace at $location_in_hex. However, in rare cases, it is possible that
# the value at $location_in_hex is already 0x20. In that case use 0x21 as the new value
set overwrite_value = "0x20"
if ("$value_at_location" == "20") then
	set overwrite_value = "0x21"
endif
echo
echo
$echoline
echo "Overwrite value = GTM_TEST_DEBUGINFO $overwrite_value"
$echoline
# Now that we have all the needed values, corrupt the hash
$DSE ch -file -location=$location_in_hex -size=1 -value=$overwrite_value >&dse.out
# Make sure the hash is indeed corrupted.
set new_hash = `$DSE dump -file -all |& $grep "Database file encryption hash" | $tst_awk '{print $NF}'`
echo
echo
$echoline
if ("$hash" != "$new_hash") then
	echo "Verfied that hash is indeed corrupted"
else
	echo "TEST-E-FAILED, could not corrupt encryption hash at location $location_in_hex with value $overwrite_value"
endif
$echoline

echo
echo
$echoline
echo "Attempt to read global should issue CRYPTKEYFETCHFAILED error"
$echoline
$gtm_exe/mumps -run %XCMD 'w ^ENCRYPT' | sed 's/Expected hash - [A-Z|0-9]*/Expected hash - ##FILTERED##/g'

echo
echo
$echoline
echo "Fix the corrupt hash with DSE CHANGE -FILE -ENCRYPTION_HASH"
$echoline
$DSE change -file -encryption_hash |& sed 's/Expected hash - [A-Z|0-9]*/Expected hash - ##FILTERED##/g'

echo
echo
$echoline
echo "Read of global again should now work fine"
$echoline
$gtm_exe/mumps -run %XCMD 'w ^ENCRYPT'

$gtm_tst/com/dbcheck.csh
