#!/usr/bin/expect -f
#################################################################
#								#
# Copyright (c) 2013-2016 Fidelity National Information		#
# Services, Inc. and/or its subsidiaries. All rights reserved.	#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################
#
# This Expect script was generated by autoexpect on Thu Jul 18 11:55:54 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#

set timeout -1
spawn $env(SHELL)
match_max 100000
expect "*"
send -- "set prompt=\"GTM7675>\"\r"
expect "*"
expect -- "GTM7675>"
send -- "uname\r"
sleep 1
expect {
        "HP-UX" {
                send -- "setenv TERM vt320\r"
                expect -- "GTM7675>"
                send -- "stty erase '^?'\r"
                expect -- "GTM7675>"
                send -- "stty intr '^c'\r"
        }
        # AIX sets stty erase to ^H by default so change it to del (\177)
	# xterm has kdch1=^? on AIX-5. Hence set TERM environment variable to screen.
	# For this test kdch1 should have value "\E[3~".
	# AIX-6 and AIX-7 have expected value for kdch1
        "AIX" {
		send -- "uname -vr\r"
		sleep 1
		expect {
			"1 7" {
                		send -- "stty erase '^?'\r"
			}
			"1 6" {
                		send -- "stty erase '^?'\r"
			}
			"3 5" {
				send -- "setenv TERM screen\n"
				expect -- "GTM7675>"
        	        	send -- "stty erase '^?'\r"
			}
		}
        }
        "SunOS" {
                send -- "setenv TERMINFO /usr/local/lib/terminfo\r"
                expect -- "GTM7675>"
                send -- "setenv TERM vt320\r"
                expect -- "GTM7675>"
                send -- "alias stty /usr/ucb/stty\r"
        }
        "Linux" {send -- "\r"}
}
set timeout 10
expect -- "GTM7675>"
# Test starts here:
send -- "mumps -run tterase\r"
#case:(ESCAPE:EDIT:EMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter DELETE key on empty read buffer\r"
send -- "\[3~"
expect "PASS\r"
#case:(ESCAPE:EDIT:EMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter ERASE special terminal input character followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter BACKSPACE followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter DELETE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\[3~\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter DELETE followed by newline character\r"
send -- "GTMODODOD\[3~\r"
expect "PASS\r"
#case:(ESCAPE:EDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter DELETE key on empty read buffer followed by newline character\r"
send -- "\[3~\r"
expect "PASS\r"
#case:(ESCAPE:EDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter ERASE special terminal input character followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter BACKSPACE followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter DELETE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\[3~\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter DELETE followed by newline character\r"
send -- "GTMODODOD\[3~\r"
expect "PASS\r"
#case:(ESCAPE:NOEDIT:EMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter DELETE key on empty read buffer\r"
send -- "\[3~"
expect "PASS\r"
#case:(ESCAPE:NOEDIT:EMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter DELETE key on nonempty read buffer - Use string GTMM -\r"
send -- "GTMM\[3~"
expect "PASS\r"
#case:(ESCAPE:NOEDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter DELETE key on empty read buffer\r"
send -- "\[3~"
expect "PASS\r"
#case:(ESCAPE:NOEDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter DELETE key on nonempty read buffer - Use string GTMM -\r"
send -- "GTMM\[3~"
expect "PASS\r"
#case:(NOESCAPE:EDIT:EMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter DELETE key on empty read buffer\r"
send -- "\[3~"
expect "PASS\r"
#case:(NOESCAPE:EDIT:EMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter ERASE special terminal input character followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter BACKSPACE followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter DELETE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\[3~\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter DELETE followed by newline character\r"
send -- "GTMODODOD\[3~\r"
expect "PASS\r"
#case:(NOESCAPE:EDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter DELETE key on empty read buffer followed by newline character\r"
send -- "\[3~\r"
expect "PASS\r"
#case:(NOESCAPE:EDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter ERASE special terminal input character followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter BACKSPACE followed by newline character\r"
send -- "GTMODODOD\r"
expect "PASS\r"
expect "Enter DELETE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\[3~\r"
expect "PASS\r"
expect "Enter string GTM. Go to beginning by pressing LEFT arrow key thrice. Enter DELETE followed by newline character\r"
send -- "GTMODODOD\[3~\r"
expect "PASS\r"
#case:(NOESCAPE:NOEDIT:EMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer\r"
send -- ""
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer\r"
send -- ""
expect "PASS\r"
#case:(NOESCAPE:NOEDIT:EMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
#case:(NOESCAPE:NOEDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
expect "Enter BACKSPACE key on empty read buffer followed by newline character\r"
send -- "\r"
expect "PASS\r"
#case:(NOESCAPE:NOEDIT:NOEMPTERM)
expect "Enter ERASE special terminal input character on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect "Enter BACKSPACE key on nonempty read buffer - Use string GTMM - followed by newline character\r"
send -- "GTMM\r"
expect "PASS\r"
expect -- "GTM7675>"
send -- "exit\r"
expect eof
