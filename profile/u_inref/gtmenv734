#!/usr/local/bin/tcsh
# ------------------------------------------------------------------------
# gtmenv - GT.M and PROFILE/Anyware environment script 
#
# Description: 
# This script will define a users GT.M and PROFILE/Anyware environment for
# the directory referenced by the DIR environment variable.  All changes
# needed to this script should be placed in the gtmenv1 script file.  The
# gtmenv1 script file is called at the end of this script file.
#
# Input: None
#
# Output: Assigns GT.M and PROFILE/Anyware environment variables
#
# Usage: . gtmenv or . /directory_path/gtmenv
#        i.e. $ . /ibsprod/gtmenv 
#             or 
#             $ cd /ibsprod
#             $ . gtmenv
#
# Setup: 
#        1.  At top assign DIR to equal the directory name
#            i.e DIR=/ibsprod or DIR=/fmsprod
#        2.  Assign PROFILE_BIT_LEVEL to be the bit level to
#            be used for Profile/GT.M
#
# ------------------------------------------------------------------------
#
#       John Hobgood - 05/17/2010
#                  - Converted to use exit status vs test blocks for
#                    evaluated expressions containing variable substitution.
#                    (ksh 93 port)
#
#	John Hobgood  - 07/22/2009
#		      Added call to sca_pa_ksh_lib.ksh.
#
#	Rick Silvagni - 01/22/2009 - Modified gtmenv Template
#	              Added ability for Profile to use 64 Bit libraries
#	              by adding the environment variable PROFILE_GTM_BIT_LEVEL
#	              Added ability for users to define a location where GTMXC
#	              is located by assigning PROFILE_GTMXC_LOCATION.  Likely
#	              location of assignment would be /SCA/scaenv or the system
#	              startup where BUILD_DIR is currently defined.
#
#	Rick Silvagni - 08/26/2008 - Modified gtmenv Template
#	              Modified to set GT.M search list to the end to
#	              - Allow for custom ${SCAU_*} for directory locations
#	              - Add the ability to add Packages into the search list
#	                with or without a obj directory assocated with the
#	                package
#	              Unset SCAU_PACKAGES incase it is left over from
#	              other environments
#	              Added a check for ${DIR}/archenv, and if it exists
#	              run it to define history archiving
# ------------------------------------------------------------------------
# Directory to define GT.M and PROFILE/Anyware environment variables.
setenv DIR ${testbasedir}/v734perf
source ${testbasedir}/SCA/scaenv.csh

# ---- Calculated environment variables based upon DIR and PROFILE_GTM_BIT_LEVEL ----
setenv PROFILE_DIR ${DIR}
setenv DIR_REF `basename ${DIR}|tr "[a-z]" "[A-Z]"`
setenv ${DIR_REF} ${DIR}

# Set up the GTM distribution variable
setenv gtm_dist ${DIR}/gtm_dist
setenv GTM_DIST ${gtm_dist}

# Set up the SCA GTM variables
setenv SCA_GTMO ${BUILD_DIR}/sca_gtm/obj
setenv SCA_RTNS ${BUILD_DIR}/sca_gtm/rtns

# Set up the IBS or FMS directory variables (SCAU variables)
setenv SCAU_DIR ${DIR}
setenv SCAU_GBLS ${DIR}/gbls
setenv SCAU_MRTNS ${DIR}/mrtns
setenv SCAU_CRTNS ${DIR}/crtns
setenv SCAU_SRTNS ${DIR}/srtns
setenv SCAU_PRTNS ${DIR}/prtns
setenv SCAU_ZRTNS ${DIR}/zrtns
setenv SCAU_HELP ${DIR}/help
setenv SCAU_DDP ${DIR}/ddp
setenv SCAU_EXP ${DIR}/exp
setenv SCAU_SPOOL ${DIR}/spool
setenv SCAU_DDPLOG "${DIR_REF}"
setenv SCAU_LOG_DIR ${DIR}/log
setenv SCAU_REPL_DIR ${DIR}/replication
setenv SCAU_${DIR_REF}_TBLS ${DIR}/gbls/mumps.tbls
setenv SCAU_${DIR_REF}_TMP ${DIR}/gbls/mumps.tmp
setenv SCAU_${DIR_REF}_UBG ${DIR}/gbls/mumps.ubg
setenv SCAU_${DIR_REF}_HIST ${DIR}/gbls/mumps.hist
setenv SCAU_${DIR_REF}_ACN ${DIR}/gbls/mumps.acn
setenv SCAU_${DIR_REF}_CIF ${DIR}/gbls/mumps.cif

# Setup Replication if being used. - Needed for IBS servers
# Note: NULL or not defined means not a replicated environment
#       Defined (N/Y) means replication is used.
setenv START_REPLICATION ""
if ( "${START_REPLICATION}" == "Y" ) then
   setenv SCAU_REPL_CONTROLLED ${BUILD_DIR}/tools/startup/sca_pa_controlled.sh
   setenv SCAU_REPL_CONTROLLED INIT=${DIR}/sca_init.ini
   setenv SCAU_REPL_FAILOVER ${BUILD_DIR}/tools/startup/sca_pa_failover.sh
   setenv SCAU_REPL_FAILOVER_INIT ${DIR}/sca_init.ini
   setenv gtm_repl_instance ${SCAU_GBLS}/REPL_INSTANCE.DAT
else
   unsetenv SCAU_REPL_CONTROLLED SCAU_REPL_CONTROLLED_INIT
   unsetenv SCAU_REPL_FAILOVER SCAU_REPL_FAILOVER_INIT
   unsetenv gtm_repl_instance
endif

# Set up the GTM specific directory variables
setenv gtmgbldir ${SCAU_GBLS}/mumps.gld
setenv mumps_tbls ${SCAU_GBLS}/mumps.tbls
setenv mumps_ttx ${SCAU_GBLS}/mumps.ttx
setenv mumps_ubg ${SCAU_GBLS}/mumps.ubg
setenv gtm_repl_instance ${SCAU_GBLS}/replic/mumps.repl

# Unset prior to customization in gtmenv1.  If not defined in gtmenv1
# will be set to default upon returning
unsetenv gtmroutines

# Unset Packages which is defined later
unsetenv SCAU_PACKAGES

# Set SCA path
setenv PATH ".:${HOME}:/bin:/bin/posix:/usr/bin:/usr/sbin:/usr/contrib/bin:/usr/local/bin:/etc:${gtm_dist}:${BUILD_DIR}/install/usrlocalbin"

# Set the file mode creation mask
umask 002

if ( ! $?SCA_GTMXC_LOCATION ) then
	setenv LOCATION_GTMXC ${SCA_GTM}/extcall
else
	setenv LOCATION_GTMXC ${SCA_GTMXC_LOCATION}
endif

setenv GTMXC_alerts "${LOCATION_GTMXC}/alerts.xc"
setenv GTMXC_extcall "${LOCATION_GTMXC}/extcall.xc"
setenv GTMXC_htm "${LOCATION_GTMXC}/htm.xc"
setenv GTMXC_mtm "${LOCATION_GTMXC}/mtm.xc"
setenv GTMXC_mq "${LOCATION_GTMXC}/mq.xc"
unsetenv LOCATION_GTMXC

# Call custom gtmenv file if it exist.
if ( -f ${DIR}/gtmenv7341 ) source ${DIR}/gtmenv7341

# Call History Archiving if it exists
if ( -f ${DIR}/archenv ) source ${DIR}/archenv


# Create search list if SCAU_PACKAGES is defined.  If not defined, set to default.
# Use a predefined gtm routines if defined in gtmenv1
if ( ! $?gtmroutines )  then
   setenv rtn_list "${SCAU_PRTNS} ${SCAU_ZRTNS} ${SCAU_SRTNS}/obj(${SCAU_SRTNS}) ${SCAU_MRTNS}/obj(${SCAU_MRTNS}) ${SCAU_CRTNS}/obj(${SCAU_CRTNS}) ${SCA_GTMO}(${SCA_RTNS}) ${gtm_dist}"
else
   setenv rtn_list "${gtmroutines}"
endif
if ( ! $?SCAU_PACKAGES )  then
   setenv gtmroutines "${rtn_list}"
else
   # Build package search list
   @ piece=1
   setenv pak_list ""

   setenv package `echo ${SCAU_PACKAGES}: | cut -f${piece} -d':'` ; @ piece = ${piece} + 1
   while ( "${package}" != "" ) 
      setenv rtn_package ${SCAU_CRTNS}/${package}
      setenv obj_package ${rtn_package}/obj
      if ( -d ${rtn_package} ) then
         if ( ! -d ${obj_package} ) then
            setenv rtn_list_package "${rtn_package}"
         else
            setenv rtn_list_package "${obj_package}(${rtn_package})"
         endif
         if ( `echo ${rtn_list} | grep ${rtn_list_package} ` == "" ) then
            setenv pak_list "${pak_list} ${rtn_list_package}"
         endif
      else
         echo "Invalid Package routine directory for ${package}"
      endif
      setenv package `echo ${SCAU_PACKAGES}: | cut -f${piece} -d':'` ; @ piece= ${piece} + 1
   end 

   setenv pak_list "${pak_list} ${SCAU_CRTNS}/obj(${SCAU_CRTNS})"
   setenv org "${SCAU_CRTNS}/obj(${SCAU_CRTNS})"

   setenv target1 `echo $org | sed 's#/#\\\/#g'`
   setenv replace1 `echo $pak_list | sed 's#/#\\\/#g'`
   setenv gtmroutines `echo $rtn_list | sed "s#$target1#$replace1#g"`
   #setenv gtmroutines "`echo ${rtn_list} | sed s/$(echo ${org} | sed 's/\//\\\\\//g')/$(echo ${pak_list} | sed 's/\//\\\\\//g')/g`"
   #echo ${rtn_list} | sed "s/$(echo ${org} | sed 's/\//\\\//g')/$(echo ${pak_list} | sed 's/\//\\\//g')/g"
endif
#unsetenv org obj_package package pak_list piece 
#unsetenv rtn_list rtn_list_package rtn_package 

